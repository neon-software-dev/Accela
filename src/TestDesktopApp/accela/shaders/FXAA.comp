#version 450

//
// Definitions
//
const uint POST_EFFECT_LOCAL_SIZE_X = 16;
const uint POST_EFFECT_LOCAL_SIZE_Y = 16;
const uint POST_EFFECT_LOCAL_SIZE_Z = 1;

//
// Inputs
//
layout(push_constant) uniform constants
{
    uint renderWidth;
    uint renderHeight;
} PushConstants;

layout (set = 0, binding = 0) uniform sampler2DArray i_inputImage;
layout (set = 0, binding = 1, rgba8) uniform image2DArray i_outputImage;

layout (local_size_x = POST_EFFECT_LOCAL_SIZE_X,
        local_size_y = POST_EFFECT_LOCAL_SIZE_Y,
        local_size_z = POST_EFFECT_LOCAL_SIZE_Z) in;

const float EDGE_THRESHOLD_MIN = 0.0312f;
const float EDGE_THRESHOLD_MAX = 0.125f;
const int ITERATIONS = 12;
const float SUBPIXEL_QUALITY = 0.75f;

#define QUALITY(q) ((q) < 5 ? 1.0 : ((q) > 5 ? ((q) < 10 ? 2.0 : ((q) < 11 ? 4.0 : 8.0)) : 1.5))

float rgb2luma(vec3 rgb)
{
    return sqrt(dot(rgb, vec3(0.299, 0.587, 0.114)));
}

vec4 DoWork(int layerIndex)
{
    const vec2 inUV = {
        (float(gl_GlobalInvocationID.x) + 0.5f) / float(PushConstants.renderWidth),
        (float(gl_GlobalInvocationID.y) + 0.5f) / float(PushConstants.renderHeight),
    };

    const vec2 inverseScreenSize = {
        1.0f / float(PushConstants.renderWidth),
        1.0f / float(PushConstants.renderHeight)
    };

    const vec4 inPixel = texture(i_inputImage, vec3(inUV, layerIndex));

    // Luma at the current fragment
    const float lumaCenter = rgb2luma(inPixel.xyz);

    // Luma at the four direct neighbours of the current fragment.
    const float lumaDown  = rgb2luma(textureOffset(i_inputImage, vec3(inUV, layerIndex), ivec2(0,1)).rgb);
    const float lumaUp    = rgb2luma(textureOffset(i_inputImage, vec3(inUV, layerIndex), ivec2(0,-1)).rgb);
    const float lumaLeft  = rgb2luma(textureOffset(i_inputImage, vec3(inUV, layerIndex), ivec2(-1,0)).rgb);
    const float lumaRight = rgb2luma(textureOffset(i_inputImage, vec3(inUV, layerIndex), ivec2(1,0)).rgb);

    // Find the maximum and minimum luma around the current fragment.
    const float lumaMin = min(lumaCenter, min(min(lumaDown,lumaUp), min(lumaLeft,lumaRight)));
    const float lumaMax = max(lumaCenter, max(max(lumaDown,lumaUp), max(lumaLeft,lumaRight)));

    // Compute the delta.
    float lumaRange = lumaMax - lumaMin;

    // If the luma variation is lower that a threshold (or if we are in a really dark area), we are not on an edge, don't perform any AA.
    if (lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX))
    {
        return inPixel;
    }

    // Query the 4 remaining corners lumas.
    const float lumaDownLeft    = rgb2luma(textureOffset(i_inputImage, vec3(inUV, layerIndex), ivec2(-1,1)).rgb);
    const float lumaUpRight     = rgb2luma(textureOffset(i_inputImage, vec3(inUV, layerIndex), ivec2(1,-1)).rgb);
    const float lumaUpLeft      = rgb2luma(textureOffset(i_inputImage, vec3(inUV, layerIndex), ivec2(-1,-1)).rgb);
    const float lumaDownRight   = rgb2luma(textureOffset(i_inputImage, vec3(inUV, layerIndex), ivec2(1,1)).rgb);

    // Combine the four edges lumas (using intermediary variables for future computations with the same values).
    const float lumaDownUp = lumaDown + lumaUp;
    const float lumaLeftRight = lumaLeft + lumaRight;

    // Same for corners
    const float lumaLeftCorners = lumaDownLeft + lumaUpLeft;
    const float lumaDownCorners = lumaDownLeft + lumaDownRight;
    const float lumaRightCorners = lumaDownRight + lumaUpRight;
    const float lumaUpCorners = lumaUpRight + lumaUpLeft;

    // Compute an estimation of the gradient along the horizontal and vertical axis.
    const float edgeHorizontal = abs(-2.0f * lumaLeft + lumaLeftCorners) +
                                 abs(-2.0f * lumaCenter + lumaDownUp ) * 2.0f +
                                 abs(-2.0f * lumaRight + lumaRightCorners);

    const float edgeVertical = abs(-2.0f * lumaUp + lumaUpCorners) +
                               abs(-2.0f * lumaCenter + lumaLeftRight) * 2.0f +
                               abs(-2.0f * lumaDown + lumaDownCorners);

    // Is the local edge horizontal or vertical ?
    const bool isHorizontal = (edgeHorizontal >= edgeVertical);

    // Select the two neighboring texels lumas in the opposite direction to the local edge.
    const float luma1 = isHorizontal ? lumaDown : lumaLeft;
    const float luma2 = isHorizontal ? lumaUp : lumaRight;
    // Compute gradients in this direction.
    const float gradient1 = luma1 - lumaCenter;
    const float gradient2 = luma2 - lumaCenter;

    // Which direction is the steepest ?
    const bool is1Steepest = abs(gradient1) >= abs(gradient2);

    // Gradient in the corresponding direction, normalized.
    const float gradientScaled = 0.25f * max(abs(gradient1), abs(gradient2));

    // Choose the step size (one pixel) according to the edge direction.
    float stepLength = isHorizontal ? inverseScreenSize.y : inverseScreenSize.x;

    // Average luma in the correct direction.
    float lumaLocalAverage = 0.0;

    if (is1Steepest)
    {
        // Switch the direction
        stepLength = - stepLength;
        lumaLocalAverage = 0.5f * (luma1 + lumaCenter);
    }
    else
    {
        lumaLocalAverage = 0.5f * (luma2 + lumaCenter);
    }

    // Shift UV in the correct direction by half a pixel.
    vec2 currentUv = inUV;

    if (isHorizontal)
    {
        currentUv.y += stepLength * 0.5f;
    }
    else
    {
        currentUv.x += stepLength * 0.5f;
    }

    // Compute offset (for each iteration step) in the right direction.
    const vec2 offset = isHorizontal ? vec2(inverseScreenSize.x, 0.0) : vec2(0.0, inverseScreenSize.y);
    // Compute UVs to explore on each side of the edge, orthogonally. The QUALITY allows us to step faster.
    vec2 uv1 = currentUv - offset;
    vec2 uv2 = currentUv + offset;

    // Read the lumas at both current extremities of the exploration segment, and compute the delta wrt to the local average luma.
    float lumaEnd1 = rgb2luma(texture(i_inputImage, vec3(uv1, layerIndex)).rgb);
    float lumaEnd2 = rgb2luma(texture(i_inputImage, vec3(uv2, layerIndex)).rgb);
    lumaEnd1 -= lumaLocalAverage;
    lumaEnd2 -= lumaLocalAverage;

    // If the luma deltas at the current extremities are larger than the local gradient, we have reached the side of the edge.
    bool reached1 = abs(lumaEnd1) >= gradientScaled;
    bool reached2 = abs(lumaEnd2) >= gradientScaled;
    bool reachedBoth = reached1 && reached2;

    // If the side is not reached, we continue to explore in this direction.
    if (!reached1)
    {
        uv1 -= offset;
    }
    if (!reached2)
    {
        uv2 += offset;
    }

    // If both sides have not been reached, continue to explore.
    if (!reachedBoth)
    {
        for (int i = 2; i < ITERATIONS; i++)
        {
            // If needed, read luma in 1st direction, compute delta.
            if (!reached1)
            {
                lumaEnd1 = rgb2luma(texture(i_inputImage, vec3(uv1, layerIndex)).rgb);
                lumaEnd1 = lumaEnd1 - lumaLocalAverage;
            }

            // If needed, read luma in opposite direction, compute delta.
            if (!reached2)
            {
                lumaEnd2 = rgb2luma(texture(i_inputImage, vec3(uv2, layerIndex)).rgb);
                lumaEnd2 = lumaEnd2 - lumaLocalAverage;
            }

            // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.
            reached1 = abs(lumaEnd1) >= gradientScaled;
            reached2 = abs(lumaEnd2) >= gradientScaled;
            reachedBoth = reached1 && reached2;

            // If the side is not reached, we continue to explore in this direction, with a variable quality.
            if (!reached1)
            {
                uv1 -= offset * QUALITY(i);
            }
            if (!reached2)
            {
                uv2 += offset * QUALITY(i);
            }

            // If both sides have been reached, stop the exploration.
            if (reachedBoth) { break;}
        }
    }

    // Compute the distances to each extremity of the edge.
    const float distance1 = isHorizontal ? (inUV.x - uv1.x) : (uv1.y - inUV.y);
    const float distance2 = isHorizontal ? (uv2.x - inUV.x) : (inUV.y - uv2.y);

    // In which direction is the extremity of the edge closer ?
    const bool isDirection1 = distance1 < distance2;
    const float distanceFinal = min(distance1, distance2);

    // Length of the edge.
    const float edgeThickness = (distance1 + distance2);

    // UV offset: read in the direction of the closest side of the edge.
    const float pixelOffset = - distanceFinal / edgeThickness + 0.5;

    // Is the luma at center smaller than the local average ?
    const bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;

    // If the luma at center is smaller than at its neighbour, the delta luma at each end should be positive (same variation).
    // (in the direction of the closer side of the edge.)
    const bool correctVariation = ((isDirection1 ? lumaEnd1 : lumaEnd2) < 0.0) != isLumaCenterSmaller;

    // If the luma variation is incorrect, do not offset.
    float finalOffset = correctVariation ? pixelOffset : 0.0;

    // Sub-pixel shifting
    // Full weighted average of the luma over the 3x3 neighborhood.
    const float lumaAverage = (1.0f/12.0f) * (2.0f * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);
    // Ratio of the delta between the global average and the center luma, over the luma range in the 3x3 neighborhood.
    const float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter)/lumaRange, 0.0f, 1.0f);
    const float subPixelOffset2 = (-2.0f * subPixelOffset1 + 3.0f) * subPixelOffset1 * subPixelOffset1;
    // Compute a sub-pixel offset based on this delta.
    const float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;

    // Pick the biggest of the two offsets.
    finalOffset = max(finalOffset, subPixelOffsetFinal);

    // Compute the final UV coordinates.
    vec2 finalUv = inUV;

    if (isHorizontal)
    {
        finalUv.y += finalOffset * stepLength;
    }
    else
    {
        finalUv.x += finalOffset * stepLength;
    }

    // Read the color at the new UV coordinates, and use it.
    const vec3 finalColor = texture(i_inputImage, vec3(finalUv, layerIndex)).rgb;

    return vec4(finalColor, inPixel.a);
}

void main()
{
    // Ignore out of render size work invocations (for when a render dimension isn't cleanly divisible by
    // the local group size).
    if (gl_GlobalInvocationID.x > PushConstants.renderWidth || gl_GlobalInvocationID.y > PushConstants.renderHeight)
    {
        return;
    }

    const int numLayers = imageSize(i_outputImage).z;

    for (int layerIndex = 0; layerIndex < numLayers; ++layerIndex)
    {
        const vec4 outPixel = DoWork(layerIndex);

        imageStore(i_outputImage, ivec3(gl_GlobalInvocationID.xy, layerIndex), outPixel);
    }
}
